<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- =========================================================
             Shiro Core Components - Not Spring Specific
             =========================================================
    -->
    <!--
    Shiro's main business-tier object for web-enabled applications
    (use DefaultSecurityManager instead when there is no web environment)
    -->
    <!--
    1.配置SecurityManager安全管理器
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
        <!-- 设置rememberMe的那个Cookie 10秒超时 -->
        <property name="rememberMeManager.cookie.maxAge" value="10"/><!-- 单位：秒 -->
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--
    2.配置CacheManager缓存管理器，需要加入EhCache的jar包及配置文件
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/>
        -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.
        -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 配置ModularRealmAuthenticator认证器 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!-- 多Realm情况下的认证策略，AtLeastOneSuccessfulStrategy表示至少有一个Realm你认证成功了，那么就算你认证成功，即登录成功 -->
        <property name="authenticationStrategy">
            <!-- 内部参考/引用bean，不能被外部的bean引用，只能在内部使用，可以不用设置id，此处为调用AtLeastOneSuccessfulStrategy空参构造器来创建Bean的对象实例 -->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--
    3.配置Realm，直接配置实现了org.apache.shiro.realm.Realm接口的bean
    -->
    <bean id="jdbcRealm" class="com.atguigu.shiro.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1024"/><!-- 指定md5的加密次数，这样更加安全 -->
            </bean>
        </property>
    </bean>

    <bean id="secondRealm" class="com.atguigu.shiro.realms.SecondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <property name="hashIterations" value="1024"/><!-- 指定sha1的加密次数，这样更加安全 -->
            </bean>
        </property>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called.
    -->
    <!--
    4.配置LifecycleBeanPostProcessor，生命周期后置处理器
    可以自定义的来调用配置在Spring IOC容器中Shiro Bean的生命周期方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--
    5.启用Spring IOC容器中使用Shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才可以使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--
    6.配置Shiro Filter id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致
    若不一致，则会抛出：NoSuchBeanDefinitionException
    因为Shiro会去Spring IOC容器中查找和<filter-name>名字对应的filter bean
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>

        <!--
        	配置哪些页面需要受保护以及访问这些页面需要的权限
        	1). anon   可以被匿名访问
        	2). authc  必须认证（即登录）后才可能访问的页面
        	3). logout 用户注销
        	           注意一个细节，测试的时候切换用户一定要logout一下，要不然你会发现用户名和密码输入错误也可以登录成功
        	           是因为用到了shiro的缓存，你不管怎么登录用的都是缓存里面的用户，因此需要logout一下，给缓存中的用户evict一下
        	           evict：移除，赶出
        	4). roles  角色过滤器，用户有对应的角色才可以访问资源
        -->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                /login.jsp = anon-->
<!--                /shiro/login = anon-->
<!--                /shiro/logout = logout-->
<!--                /admin.jsp = roles[admin]-->
<!--                /user.jsp = roles[user]-->
<!--                # everything else requires authentication-->
<!--                # /** = authc 配置在最后，如果配置在前面会覆盖后面配置，Shiro的URL权限采用第一次匹配优先方式-->
<!--                /** = authc-->
<!--            </value>-->
<!--        </property>-->
    </bean>

    <!-- 配置一个bean，该bean实际上是一个Map，通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"/>

    <bean id="filterChainDefinitionMapBuilder"
          class="com.atguigu.shiro.factory.FilterChainDefinitionMapBuilder"/>

    <bean id="shiroService"
          class="com.atguigu.shiro.services.ShiroService"/>

</beans>